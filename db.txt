CREATE TABLE IF NOT EXISTS users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('administrator', 'supervisor', 'contractor') NOT NULL,
    project_id INT, -- If the user is a supervisor, they are assigned to a project
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);


CREATE TABLE projects (
    project_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);
 

CREATE TABLE employees (
    employee_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    contractor_id INT,
    FOREIGN KEY (contractor_id) REFERENCES users(user_id)
);


CREATE TABLE induction_courses (
    course_id INT AUTO_INCREMENT PRIMARY KEY,
    date DATE NOT NULL
);


CREATE TABLE course_assignments (
    assignment_id INT AUTO_INCREMENT PRIMARY KEY,
    employee_id INT,
    course_id INT,
    supervisor_id INT,
    assignment_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id),
    FOREIGN KEY (course_id) REFERENCES induction_courses(course_id),
    FOREIGN KEY (supervisor_id) REFERENCES users(user_id)
);


INSERT INTO users (name, email, password, role, project_id)
VALUES ('John Doe', 'john.doe@example.com', 'hashed_password', 'supervisor', 1);


INSERT INTO users (name, email, password, role)
VALUES ('Carlos Gomez', 'carlos.gomez@example.com', 'hashed_password', 'contractor');

INSERT INTO employees (name, email, contractor_id)
VALUES ('Ana Martinez', 'ana.martinez@example.com', 2); -- Assuming the contractor ID is 2

-- First, create a course if it doesn't already exist
INSERT INTO induction_courses (date) VALUES ('2024-09-15');

-- Then, assign the course to an employee
INSERT INTO course_assignments (employee_id, course_id, supervisor_id)
VALUES (1, 1, 1); -- Assuming the employee ID is 1, course ID is 1, and supervisor ID is 1
